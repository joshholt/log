<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code is my art]]></title>
  <link href="http://joshholt.github.com/log/atom.xml" rel="self"/>
  <link href="http://joshholt.github.com/log/"/>
  <updated>2012-01-23T16:15:20-05:00</updated>
  <id>http://joshholt.github.com/log/</id>
  <author>
    <name><![CDATA[Josh Holt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building your Cloud Component Provider on Heroku with NodeJS]]></title>
    <link href="http://joshholt.github.com/log/blog/2012/01/18/Building-your-Cloud-Component-Provider-on-Heroku-with-NodeJS"/>
    <updated>2012-01-18T01:00:00-05:00</updated>
    <id>http://joshholt.github.com/log/blog/2012/01/18/Building-your-Cloud-Component-Provider-on-Heroku-with-NodeJS</id>
    <content type="html"><![CDATA[<h3>Do you want to build a Cloud Component Provider for the Eloqua Cloud Platform ?</h3>

<p>If you answered yes to that question, then you&#8217;ve come to the right place.
In this article I am going to walk you down the path that will help you
acheive your goal, one step at a time&#8230;</p>

<p><span class='pullquote-right' data-pullquote='I find that starting with some assumptions provides a kind of loose contract between you (the reader) and I.'>
I am going to start with some assumptions up front so that there is no confusion about the direction we are heading.
I find that starting with some assumptions provides a kind of loose contract between you (the reader) and I.
You will encounter all of the following items listed below, so grab you coding hat and let&#8217;s build a provider service shall we?</p>

<blockquote><p>1. You have some idea about Cloud Components for Eloqua<br/>2. You have a desire to play with NodeJS<br/>3. You think it would be neat to deploy your provider to Heroku<br/>4. You are comfortable using the command line (Terminal | console | etc&#8230;)</p></blockquote>


<p></span></p>

<p><span class='pullquote-right' data-pullquote='Now that we have the assumptions out of the way, you will need the following prerequisites.'>
Now that we have the assumptions out of the way, you will need the following prerequisites.
An account on <a href="https://api.heroku.com/signup">Heroku</a>, where we will be deploying your provider service.
An account on <a href="https://github.com/signup/free">Github</a>, keeping your code under version control is a good idea.
An up-to-date version of NodeJS and NPM installed, You can find instructions for your platform by visiting this <a href="https://github.com/joyent/node/wiki/Installation">site</a>.
Then grab your text editor of choice, I enjoy <a href="http://www.sublimetext.com/2">Sublime Text 2</a>, and off we go.
</span></p>

<p><span class='pullquote-right' data-pullquote='The first set of tasks will consist of setting up your NodeJS project'>
The first set of tasks will consist of setting up your NodeJS project.
Once you have meet the prerequisites installed you will want to open your terminal
and create a dev directory under your home folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install -g express
</span><span class='line'>$ express my-first-component-provider
</span><span class='line'>$ cd my-first-component-provider
</span><span class='line'>$ npm install
</span><span class='line'>$ mkdir lib
</span><span class='line'>$ touch lib/service_document.js</span></code></pre></td></tr></table></div></figure>


<p>If you followed the steps above you will now have a nice base express project
with a placeholder for your service_document which we will cover in the next
task. We will revisit this project structure later when we want to add more modules
from the NPM package repository.
</span></p>

<p><span class='pullquote-right' data-pullquote='The second task when building your provider will be your service definition'>
The second task when building your provider will be your service definition.
The service definition is a JSON document that your provider serves
publically on the web. It contains information about your company and a list
of the Cloud Components that you are going to provide. Each component has a name,
a 64x64 icon, a list of endpoints within your provider service, etc. Below you
will find an example service document.</p>

<div><script src='https://gist.github.com/1633957.js?file='></script>
<noscript><pre><code>module.exports = {
    name: 'The CCPV2 Test Provider',
    version: '2.0.0',
    logoUrl: &quot;http://ccpv2.herokuapp.com/images/cloud_components.png&quot;,
    components: [{
        name: 'The Official Test Component',
        description: &quot;This component should be used to test the features of CCP Version 2&quot;,
        iconUrl: 'http://ccpv2.herokuapp.com/images/test_component_icon.png',
        componentImage: {
            height: '200',
            width: '200',
            url: 'http://ccpv2.herokuapp.com/images/test_placeholder.png'
        },
        enable: '',
        disable: '',
        createInstance: 'http://ccpv2.herokuapp.com/components/create/theOfficialTestComponent/{Id}',
        removeInstance: 'http://ccpv2.herokuapp.com/components/remove/theOfficialTestComponent/{Id}',
        configurationUrl: 'http://ccpv2.herokuapp.com/components/configure/theOfficialTestComponent/{Id}?assetId={AssetId}&amp;contactId={ContactId}',
        renderInstance: 'http://ccpv2.herokuapp.com/components/render/theOfficialTestComponent/{Id}?assetId={AssetId}&amp;contactId={ContactId}&amp;visitorId={VisitorId}',
        instanceImage: 'http://ccpv2.herokuapp.com/components/preview/theOfficialTestComponent/{Id}?assetId={AssetId}&amp;contactId={ContactId}&amp;visitorId={VisitorId}'
    }]
};</code></pre></noscript></div>


<p></span>
<span class='pullquote-right' data-pullquote='Everything outside of the the components array describes your provider'>
Everything outside of the the components array describes your provider. The
name property is the name of your provider service and it is what gets displayed
within the setup area and landing page building areas of the Eloqua Application.
The version property is used as your own version number and the logoUrl represents
the location of your provider&#8217;s logo. Your provider logo will only show in the
setup area of the Eloqua application.
</span></p>

<p><span class='pullquote-right' data-pullquote='Each object within the components array represents one component'>
Each object within the components array represents one component.
The properties of a component are used in the following ways. The name property
represents the name of each component and it is displayed in the setup area and
landing page building areas of the Eloqua application. The description property is displayed
only in the setup area of the Eloqua application and it is used to give your users
some usage information. The iconUrl property is displayed in both the setup area and
landing page building areas of the Eloqua applications and it is used to give your
users an easy way to identify your component. The componentImage property is displayed
as soon as your component is added to the landing page building canvas and serves
as a default placeholder image for your component until it is rendered.
</span></p>

<p><span class='pullquote-right' data-pullquote='The workhorses of the component definition are the component endpoints'>
The workhorses of the component definition are the component endpoints.
There are five component endpoints and I will explain how they work. First we
will start with the &#8220;createInstance&#8221; endpoint. Eloqua will call your provider
service at this endpoint when a component has been added to the landing page builder.
This endpoint will be the first to receive the GUID identifier for a component instance.
The GUID is represented by the &#8220;{Id}&#8221; URL placeholder. You will want to use this GUID
as the identity for the component&#8217;s configuration, which brings us to the next endpoint.
The &#8220;configurationUrl&#8221; will be called by Eloqua when the user double clicks on the
component placeholder within the landing page builder. It will receive the aforementioned
GUID represented by &#8220;{Id}&#8221;, the assetId represented by &#8220;{AssetId}&#8221;, and a contactId if one
exists represented by &#8220;{ContactId}&#8221;. Usually you will use the configuration endpoint
to capture any extra information this component needs. Once a component has been configured
we can move on to rendering. A component&#8217;s &#8220;renderInstance&#8221; endpoint will be called by Eloqua
when a customer visits the landing page that contains the component. The &#8220;instanceImage&#8221; endpoint
will be called by Eloqua when a land page is being previewed and it should return a result
in the same format as the &#8220;componentImage&#8221; property. Both of the &#8220;renderInstance&#8221; and &#8220;instanceImage&#8221;
endpoints will receive a GUID represented by &#8220;{Id}&#8221;, the assetId represented by &#8220;{AssetId}&#8221;, a contactId if one
exists represented by &#8220;{ContactId}&#8221;, and the visitorId if one exists represented by &#8220;{VisitorId}&#8221;.
Last but not least every component should define the &#8220;removeInstance&#8221; endpoint and it will be
called by Eloqua when a component is deleted from the landing page build area.
</span></p>

<p><span class='pullquote-right' data-pullquote='Our third task will be to expose the service_document'>
Our third task will be to expose the service_document. By exposing the
service_document we will have provided our registration for the Eloqua Cloud Platform.
Hopefully this task will be rewarding because we will get to see the fruits of our labor.
I have included the &#8220;app.js&#8221; contents below and then I will explain what&#8217;s going on and finally
we will visit the exposed service_document endpoint and bask in the JSON definition of our provider.</p>

<div><script src='https://gist.github.com/1635351.js?file=app_stage1.js'></script>
<noscript><pre><code>var express = require('express'),
    app     = express.createServer(),
    service_document = require('./lib/service_document'),
    port    = process.env.PORT || 3000;

app.configure(function() {
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.logger());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.errorHandler({ showStack: true, dumpExceptions: true }));
  app.use(express.static(__dirname + '/public'));
});

app.get(
  '/service_document', 
  function (req, res) { 
    res.send(service_document); 
  }
);

app.listen(port, function() { console.log(&quot;Listening on &quot; + port); });</code></pre></noscript></div>


<p>Once your app.js looks like the code above you will want to drop into the terminal
and execute the following command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node app.js</span></code></pre></td></tr></table></div></figure>


<p>Then visit the <a href="http://localhost:3000/service_document">service_document</a> and you will be greeted with your first operational
endpoint. Pat yourself on the back because you have now provided a way to register
you Cloud Component Provider service with the Eloqua Cloud Platform.
</span></p>

<p><span class='pullquote-right' data-pullquote='Our fourth task will be to expose the endpoints for components'>
Our fourth task will be to expose the endpoints for components.
We are going to make use of a nice feature of express known as route middleware.
Before we get rolling on the heavy code side of this article I would like to explain
a bit about this feature so that it&#8217;s clear what&#8217;s going on in the code.
</span>
<span class='pullquote-right' data-pullquote='Route middleware is a way to intercept the incomming web request'>
Route middleware is a way to intercept the incomming web request, do some processing
and pass the result of that processing on to the original route handler. What
makes this feature nice is that is gives us a way to generalize the work into four
reusable functions that can be used for any component you plan to provide.
Now, on with the code&#8230;
</span></p>

<p><span class='pullquote-right' data-pullquote='We are going to store our route middleware in it&#8217;s own module'>
We are going to store our route middleware in it&#8217;s own module. Fist let&#8217;s
execute the following command to create a placeholder file for the module code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch lib/route_db_middle_ware.js</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s open our newly created file in our editor and add the following code.</p>

<div><script src='https://gist.github.com/1635644.js?file='></script>
<noscript><pre><code>module.exports = {
};</code></pre></noscript></div>


<p>Now that you have that code you are ready almost ready for configuring and previewing
a component instance. We just need to fill in the functions that represent the CRUD
operations on the data storage. Normally we would use a database of some kind
but for the purpose of this article we are just going to use a long lived
javascript object as our database and we will pass that to our route_db_middle_ware.</p>

<p>Let&#8217;s begin filling in the CRUD operations, then we will include the route middle
ware in our application and wire everything up. First up will be create and it&#8217;s
fairly simple thanks to our little helper functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">createInstance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">guid</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to create an instance... No GUID Supplied&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">req</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">insertRecord</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">req</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we make use of the &#8220;insertRecords&#8221; function and proceed to the next handler
which happens to be the route handler.</p>

<p>Next we will fill in the createInstance function which represents the update operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">configureInstance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">guid</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to configure an instance... No GUID Supplied&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">req</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">updateRecord</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">req</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up will be the previewInstance and renderInstance functions since they are both
making use of the read operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">previewInstance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">guid</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to preview an instance... No GUID Supplied&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">fetchRecord</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">req</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">componentImage</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">renderInstance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">guid</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to render an instance... No GUID Supplied&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">fetchRecord</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">req</span><span class="p">),</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">parsed</span><span class="p">))</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">parsed</span><span class="p">,</span> <span class="p">{</span><span class="nx">config</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">});</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">parsed</span><span class="p">))</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">parsed</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">tmp</span><span class="p">.</span><span class="nx">comments</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">[</span><span class="s1">&#39;comments&#39;</span><span class="p">]</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="p">{</span><span class="nx">config</span><span class="o">:</span> <span class="nx">tmp</span><span class="p">};</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last but not lease we need to handle the deletion of a component instance&#8217;s
configuration. We will implement the remoteInstance function which represents
the delete operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">removeInstance</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">guid</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to remove an instance... No GUID Supplied&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">req</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">deleteRecord</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">req</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you noticed the module that we required at the begining of our route middleware
and started wondering where that came from, the following code block should show
you. You will want to make your &#8220;package.json&#8221; look like the following.</p>

<div><script src='https://gist.github.com/1665546.js?file='></script>
<noscript><pre><code>{
  &quot;name&quot;: &quot;my-first-provider&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot; : {
    &quot;express&quot;: &quot;2.5.0&quot;,
    &quot;jade&quot;: &quot;0.16.4&quot;,
    &quot;underscore&quot;: &quot;1.2.1&quot;
  }
}</code></pre></noscript></div>


<p>Then run the following command from the terminal in the root of your project to
install the underscore module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have the route middleware all ready to go we can move on to wiring
everything up and then we will be ready to deploy to Heroku and relax.
</span></p>

<p><span class='pullquote-right' data-pullquote='Our fifth task will be wiring everything up and preparing for deployment'>
Our fifth task will be wiring everything up and preparing for deployment.
To begin wiring everything up so that you can expose all of the required endpoints,
we will jump back to our app.js file and we are going to make it look like the
code below.</p>

<div><script src='https://gist.github.com/1635351.js?file=app_final.js'></script>
<noscript><pre><code>var express          = require('express'),
    db               = {},
    app              = express.createServer(),
    service_document = require('./lib/service_document'),
    middle           = require('./lib/route_db_middleware'),
    renderer         = require('./lib/route_rendering_middleware'),
    port             = process.env.PORT || 3000;

/*****************************************************************************
 * Application Settings
 ****************************************************************************/
app.configure(function() {
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.logger());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.errorHandler({ showStack: true, dumpExceptions: true }));
  app.use(express.static(__dirname + '/public'));
});

/*****************************************************************************
 * Middleware Endpoints
 ****************************************************************************/
app.post(
  '/components/create/:guid', 
  middle.createInstance(db),
  function (req, res) { res.send(req.message); }
);

app.post(
  '/components/configure/:guid?', 
  middle.configureInstance(db),
  function (req, res) { res.send(req.message); }
);

app.del(
  '/components/remove/:guid?',
  middle.removeInstance(db),
  function (req, res) { res.send(req.message); }
);

app.get(
  '/components/preview/:component/:guid?', 
  middle.previewInstance(db),
  function (req, res) { res.send(req.message); }
);

app.get(
  '/components/render/:guid?', 
  middle.renderInstance(db),
  function (req, res) { 
    res.send(req.message); 
  }
);

/*****************************************************************************
 * Non Middleware Endpoints
 ****************************************************************************/
app.get(
  '/', 
  function (req, res) { 
    res.send(service_doc); 
  }
);

app.get(
  '/service_document', 
  function (req, res) { 
    res.send(service_doc); 
  }
);

app.listen(port, function() { console.log(&quot;Listening on &quot; + port); });</code></pre></noscript></div>


<p>Now that we have defined all of our routes we need to add a Procfile so that
we can deploy our provider service to Heroku.
</span></p>

<p><span class='pullquote-right' data-pullquote='We will be deploying our provider service to Heroku using the cedar stack'>
We will be deploying our provider service to Heroku using the cedar stack.
This means that we must meet the following requirements:</p>

<blockquote><p>1. Our project needs to be under version control<br/>2. Our project should have a Procfile that tells Heroku how to run our app<br/>3. We should have the Heroku gem installed</p></blockquote>


<p>The following commands should be run in your terminal inside your provider project
directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">init</span> <span class="p">.</span> <span class="o">&amp;&amp;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="p">.</span> <span class="o">&amp;&amp;</span> <span class="nx">git</span> <span class="nx">commit</span> <span class="o">-</span><span class="nx">avm</span> <span class="s2">&quot;Initial Commit&quot;</span>
</span><span class='line'><span class="nx">$</span> <span class="p">(</span><span class="nx">sudo</span><span class="p">)</span> <span class="nx">gem</span> <span class="nx">install</span> <span class="nx">heroku</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">heroku</span> <span class="nx">login</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">heroku</span> <span class="nx">create</span> <span class="o">--</span><span class="nx">stack</span> <span class="nx">cedar</span> <span class="nx">my_first_provider</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">touch</span> <span class="nx">Procfile</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then your Procfile should like like the code below.</p>

<div><script src='https://gist.github.com/1641052.js?file='></script>
<noscript><pre><code>web: node app.js</code></pre></noscript></div>


<p>Pretty simple isn&#8217;t it?
</span></p>

<p><span class='pullquote-right' data-pullquote='Our final task will be to push our provider to Heroku'>
Our final task will be to push our provider to Heroku, to do so we will need
to run the following command in your terminal under your project directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">git</span> <span class="nx">push</span> <span class="nx">heroku</span> <span class="nx">master</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">heroku</span> <span class="nx">ps</span><span class="o">:</span><span class="nx">scale</span> <span class="nx">web</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">heroku</span> <span class="nx">open</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything succeded your browser should now be open and you should be looking at
your first Cloud Component Provider deployed on Heroku using NodeJS. In the next
article we will walk through using the Cloud Component Provider Test Suite which
will become an invaluable tool for you as a Cloud Component Provider.
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Proxy With NodeJS and Stack]]></title>
    <link href="http://joshholt.github.com/log/blog/2011/07/24/quick-proxy-with-nodejs-and-stack"/>
    <updated>2011-07-24T21:11:00-04:00</updated>
    <id>http://joshholt.github.com/log/blog/2011/07/24/quick-proxy-with-nodejs-and-stack</id>
    <content type="html"><![CDATA[<h3>So you are building a SPA (Single Page App)</h3>

<p>A single page application, otherwise known as an RIA, etc&#8230; will normally
access endpoints from the server from which it is being served. But let&#8217;s
say that you would like to add some data from Twitter or Flickr or some other
external service. Wouldn&#8217;t it be nice if you could implement a single proxy
endpoint that would allow you to access secure and non-secure external services
painlessly from your RIA?</p>

<h3>If you like the minimalist approach, let&#8217;s get started</h3>

<p>Alright you are sill with me so let&#8217;s get the dependencies out of the way.</p>

<p>First Make sure that you have NodeJS installed <a href="https://github.com/joyent/node/wiki/Installation">Instructions</a>. <br/>
Then Install NPM (Node&#8217;s Package Manager) <a href="http://npmjs.org/">Instructions</a>.</p>

<p>O.K., Now that we have that out of the way let&#8217;s play in the terminal just a bit more</p>

<figure class='code'><figcaption><span>project_setup.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir simple_server; <span class="nb">cd </span>simple_server
</span><span class='line'>mkdir -pv node_modules/middleware
</span><span class='line'>mkdir public
</span><span class='line'>
</span><span class='line'>npm install simple-mime stack
</span><span class='line'>
</span><span class='line'>touch server.js
</span><span class='line'>touch node_modules/proxy.js
</span><span class='line'>touch node_modules/middleware/mount.js
</span><span class='line'>touch node_modules/middleware/static.js
</span><span class='line'>touch public/index.html
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;h1&gt;Welcome to your Simple Server&lt;/h1&gt;&quot;</span> &gt; public/index.html
</span></code></pre></td></tr></table></div></figure>


<p>Great, now everything is ready so let&#8217;s start coding shall we?</p>

<p>First let&#8217;s write our middleware for use by stack.<br/>
We will need some middleware to serve our static files and it will be the longest one.<br/>
Place the following code in <code>node_modules/middleware/static.js</code>.</p>

<figure class='code'><figcaption><span>Static File Middleware (static_middleware.js)</span> <a href='http://joshholt.github.com/log/downloads/code/proxy/static_middleware.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/*globals process unescape*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">Fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">getMime</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;simple-mime&#39;</span><span class="p">)(</span><span class="s2">&quot;application/octet-stream&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ENOENT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">ENOENT</span> <span class="o">||</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;constants&#39;</span><span class="p">).</span><span class="nx">ENOENT</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">StreamProto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;net&#39;</span><span class="p">).</span><span class="nx">Stream</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">StreamProto</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;pipe&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sys</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sys&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">StreamProto</span><span class="p">.</span><span class="nx">pipe</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">other</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sys</span><span class="p">.</span><span class="nx">pump</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">other</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">process</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;once&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">process</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">once</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">listener</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">g</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">g</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">listener</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Super simple static file server</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">setup</span><span class="p">(</span><span class="nx">mount</span><span class="p">,</span> <span class="nx">root</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">uri</span><span class="p">)</span> <span class="p">{</span> <span class="nx">req</span><span class="p">.</span><span class="nx">uri</span> <span class="o">=</span> <span class="nx">Url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">unescape</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">uri</span><span class="p">.</span><span class="nx">pathname</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\.\.+/g</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">path</span> <span class="o">||</span> <span class="nx">path</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">mount</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">!==</span> <span class="nx">mount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">path</span> <span class="o">=</span> <span class="nx">Path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">mount</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">[</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">path</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">onStat</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stat</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span> <span class="o">===</span> <span class="nx">ENOENT</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">next</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&amp;&amp;</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">isDirectory</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">path</span> <span class="o">=</span> <span class="nx">Path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">Fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">onStat</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">stat</span><span class="p">.</span><span class="nx">isFile</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;Date&quot;</span><span class="o">:</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toUTCString</span><span class="p">(),</span>
</span><span class='line'>        <span class="s2">&quot;Last-Modified&quot;</span><span class="o">:</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">mtime</span><span class="p">.</span><span class="nx">toUTCString</span><span class="p">()</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">headers</span><span class="p">[</span><span class="s2">&quot;Last-Modified&quot;</span><span class="p">]</span> <span class="o">===</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s2">&quot;if-modified-since&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">304</span><span class="p">,</span> <span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">range</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">range</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">parts</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">range</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">start</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">end</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">start</span> <span class="o">=</span> <span class="nx">end</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">end</span> <span class="o">&lt;</span> <span class="nx">start</span> <span class="o">||</span> <span class="nx">start</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">end</span> <span class="o">&gt;=</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">416</span><span class="p">,</span> <span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">code</span> <span class="o">=</span> <span class="mi">206</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">headers</span><span class="p">[</span><span class="s2">&quot;Content-Range&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;bytes &quot;</span> <span class="o">+</span> <span class="nx">start</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="nx">end</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">headers</span><span class="p">[</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">end</span> <span class="o">-</span> <span class="nx">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">headers</span><span class="p">[</span><span class="s2">&quot;Content-Type&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getMime</span><span class="p">(</span><span class="nx">path</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">stat</span><span class="p">.</span><span class="nx">size</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">ENOENT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">stream</span> <span class="o">=</span> <span class="nx">Fs</span><span class="p">.</span><span class="nx">createReadStream</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">{</span><span class="nx">start</span><span class="o">:</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="nx">end</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">stream</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">stream</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">stream</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">Fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">onStat</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we need a way to mount our proxy endpoints.<br/>
Place the following code in <code>node_modules/middleware/mount.js</code>.</p>

<figure class='code'><figcaption><span>Endpoint Mounting Middleware (mount_middleware.js)</span> <a href='http://joshholt.github.com/log/downloads/code/proxy/mount_middleware.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;url&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">setup</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">mount</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="nx">handle</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;uri&quot;</span><span class="p">))</span> <span class="p">{</span> <span class="nx">req</span><span class="p">.</span><span class="nx">uri</span> <span class="o">=</span> <span class="nx">Url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">method</span> <span class="o">===</span> <span class="nx">method</span> <span class="o">&amp;&amp;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">uri</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">===</span> <span class="nx">mount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">handler</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And last but not least we will need out proxy.<br/>
Place the following code in <code>node_modules/proxy.js</code>.</p>

<figure class='code'><figcaption><span>Proxy Middleware (proxy_middleware.js)</span> <a href='http://joshholt.github.com/log/downloads/code/proxy/proxy_middleware.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// A Super Simple Proxy</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">HTTP</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">HTTPS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;https&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;url&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">proxy_request</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">host</span>  <span class="o">=</span> <span class="nx">Url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">Url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="kc">true</span><span class="p">).</span><span class="nx">query</span><span class="p">.</span><span class="nx">host</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="nx">host</span><span class="p">.</span><span class="nx">hostname</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="nx">host</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">===</span> <span class="s1">&#39;https&#39;</span> <span class="o">?</span> <span class="mi">443</span> <span class="o">:</span> <span class="p">(</span><span class="nx">host</span><span class="p">.</span><span class="nx">port</span> <span class="o">||</span> <span class="mi">80</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">path</span><span class="o">:</span> <span class="nx">host</span><span class="p">.</span><span class="nx">pathname</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">host</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">===</span> <span class="s1">&#39;https&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">proxy_request</span> <span class="o">=</span> <span class="nx">HTTPS</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">chunk</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">proxy_request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">proxy_request</span> <span class="o">=</span> <span class="nx">HTTP</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">chunk</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">,</span> <span class="nx">res</span><span class="p">.</span><span class="nx">headers</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">proxy_request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whew, that was a lot to take in but hang in there, we&#8217;re almost finished.<br/>
We are going to bring this all together with the following code.</p>

<figure class='code'><figcaption><span>Static File Middleware (server.js)</span> <a href='http://joshholt.github.com/log/downloads/code/proxy/server.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/*globals __dirname*/</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">).</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;stack/stack&#39;</span><span class="p">)(</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;middleware/mount&#39;</span><span class="p">)(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;/_proxy&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;proxy&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;middleware/mount&#39;</span><span class="p">)(</span><span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="s1">&#39;/_proxy&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;proxy&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;middleware/mount&#39;</span><span class="p">)(</span><span class="s1">&#39;PUT&#39;</span><span class="p">,</span> <span class="s1">&#39;/_proxy&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;proxy&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;middleware/mount&#39;</span><span class="p">)(</span><span class="s1">&#39;DELETE&#39;</span><span class="p">,</span> <span class="s1">&#39;/_proxy&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;proxy&#39;</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;middleware/static&#39;</span><span class="p">)(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/public&quot;</span><span class="p">,</span> <span class="s2">&quot;index.html&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Your site and services are available @ http://0.0.0.0:&quot;</span><span class="o">+</span> <span class="mi">8080</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we can run our server with the following line in the terminal.</p>

<figure class='code'><figcaption><span>run_server.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>node server
</span></code></pre></td></tr></table></div></figure>


<p>You can access your simple server <a href="http://0.0.0.0:8080/">here</a>.<br/>
And you can test out the proxy <a href="http://0.0.0.0:8080/_proxy?host=http://api.twitter.com/1/statuses/public_timeline.json?count=3&amp;include_entities=true">here</a>.</p>

<p>Hopefully you will find this minimal example as useful as I have and it will
prove useful when creating you next RIA. All you need to do now is to drop you
RIA code into the public directory and replace the default index.html that we
created earlier in this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The SproutCore Divide]]></title>
    <link href="http://joshholt.github.com/log/blog/2011/07/24/the-sproutcore-divide"/>
    <updated>2011-07-24T18:48:00-04:00</updated>
    <id>http://joshholt.github.com/log/blog/2011/07/24/the-sproutcore-divide</id>
    <content type="html"><![CDATA[<p><strong>*** Disclaimer &#8211; Here be dragons</strong></p>


<p>Now with that out of the way, I would like to talk to you about the confusion you will have when you begin to work with SproutCore in the age of SproutCore 2.0.</p>


<p>I have no doubt that you have been hit with the SproutCore 2.0 Blitz campaign if you are reading this. So lets begin shall we, SproutCore 2.0 is going to be great for the new community and I have no doubts that it will be great for the original community. I mean the folks at strobe are cleaning up a lot of left over code and implementing a lot of features we all we&#8217;re attempting to implement in the 1.x line. With that said SproutCore 2.0 still has a ways to go before it will be ready to produce the quality &#8220;desktop like&#8221; applications that we have been accustomed to creating with the SproutCore 1.x line.</p>


<p>That&#8217;s the divide right now and it could be painful in the future if some considerations aren&#8217;t taken into account. What are those considerations you may ask? Well for starters we all know that the focus of SproutCore 2.0 is to be light-weight and easier to pick up. This is a fantastic goal because it has the potential to appeal to a wider base of developers, but here&#8217;s the catch, Those of us that made a bet on SproutCore did so b/c it kicked all of the other frameworks out there in the nuts right out of the virtual box. Did you say right out of the virtual box? Yep and that&#8217;s where that considerations come in to play. With SproutCore 2.0 you get the framework (i.e. KVO, KVC, Bindings and more) but what you don&#8217;t get is the &#8220;desktop like&#8221; feel. Now you could say that I could create this feel myself and most of us re-style the native look and feel anyhow. You would be right, but that was part of the package right?</p>


<p>I am aware of the efforts of Majd Taby on the new &#8220;SproutCore UI&#8221; but from what I can tell the efforts thus far have been on &#8220;Mobile Style&#8221; navigation and layouts. While this is really good stuff, please don&#8217;t forget that there was and still is a decent size community that live and breath the &#8220;roots&#8221; of SproutCore.</p>


<p>This divide should not exist in the future. When I get asked ( and I often do get asked ) the following question, &#8220;Which version of SproutCore should I use to build a large enterprise application&#8221;, I want to be able to say, &#8220;Just use the latest, you&#8217;ll get the same experience, with a leaner footprint&#8221;. But as it stands today I cannot in earnest give this answer. I have to give the honest answer and tell those folks to use the 1.4.5 - 1.6.x line of SproutCore.</p>


<p>So let&#8217;s build a bridge across the divide and blur the lines drawn in the sand. I&#8217;m more than willing to help in any way. Let&#8217;s not forget SproutCore&#8217;s roots and leave all of the blood, sweat and tears behind for no good reason. Let&#8217;s make it possible for all of the early adopters to come along on the Journey with Strobe and SproutCore 2.0. But keep in mind most early adopters in the enterprise adopted early because the &#8220;desktop like&#8221; experience was already there and this is important to them, you see to them agile matters and if it&#8217;s already there that&#8217;s one less thing they have to waste time on.</p>

]]></content>
  </entry>
  
</feed>
